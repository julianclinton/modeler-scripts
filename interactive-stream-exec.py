# Example IBM SPSS Modeler that interacts with the user
from java.lang import Runnable, Thread
from java.awt import BorderLayout, Dimension
from javax.swing import JFrame, JButton, JPanel, JList, JScrollPane

class SelectorWindow(JFrame):
    __callback = None
    
    # Class-specific callback
    def okCallback(self, event):
        # Check a callback has been set and the selection is not empty
        if self.__callback != None and not(self.uilist.isSelectionEmpty()):
            self.setVisible(False)
            self.__callback(self.uilist.getSelectedValue())
    
    def __init__(self):
        JFrame.__init__(self, "Select a category", size = (300, 200))
        self.uilist = JList()
        scroll = JScrollPane(self.uilist)
        scroll.setPreferredSize(Dimension(300, 200))
        # Ensure the class-specific callback is always called when the OK button is clicked
        button = JButton("OK", actionPerformed = self.okCallback)
        panel = JPanel()
        # A BorderLayout provides a simple way of laying out components in a panel
        panel.setLayout(BorderLayout())
        panel.add(scroll, BorderLayout.CENTER)
        panel.add(button, BorderLayout.SOUTH)
        self.getContentPane().add(panel)
        self.pack()
    
    def choose(self, values, cb):
        self.uilist.setListData(values)
        self.__callback = cb
        # Centre the window on the screen
        self.setLocationRelativeTo(None)
        self.setVisible(True)
		

class NodeRunner(Runnable):
    def __init__(self, n, r):
        self.node = n
        self.results = r

    def run(self):
        print "Executing", self.node.getLabel()
        self.node.run(self.results)

def runLater(node, results):
    Thread(NodeRunner(node, results)).start()


def buildStream(stream, csvFile, categoryColumn, continuousColumn):
    # Create and configure the CSV import node
    csvNode = stream.createAt("varfile", csvFile, 92, 92)
    csvNode.setPropertyValue("full_filename", csvFile)

    # Create the branch that will determine the available categories
    # Create and configure the aggregate node
    aggNode = stream.createAt("aggregate", "Agg", 184, 92)
    aggNode.setPropertyValue("keys", categoryColumn)
    # Create the table node
    tableNode = stream.createAt("table", "Table", 276, 92)
    # Connect them together
    stream.linkPath([csvNode, aggNode, tableNode])
    
    # Now create the second branch that will select the specified category
    # and produce the required graph.
    # Just create the select node - we can't configure the select expression yet
    selectNode = stream.createAt("select", "Select", 184, 184)
    # Create and configure the histogram node
    histogramNode = stream.createAt("histogram", "Histogram", 276, 184)
    histogramNode.setPropertyValue("field", continuousColumn)
    # Connect them together
    stream.linkPath([csvNode, selectNode, histogramNode])
    
    # Return the nodes that the rest of the script will need access to
    return [tableNode, selectNode, histogramNode]

def getCategories(tableNode):
    # Supply a list to capture the objects generated by executing the stream
    result = []
    tableNode.run(result)
    # Extract the row set from the table output and get the values from the first column
    rowset = result[0].getRowSet()
    rowcount = rowset.getRowCount()
    row = 0
    values = []
    while row < rowcount:
        values.append(str(rowset.getValueAt(row, 0)))
        row+=1
    # Close/delete the table output
    result[0].close()
    # Sort the values before returning them
    values.sort()
    return values

def buildOKHandler(selectNode, categoryColumn, histogramNode):
    def configAndRun(selectedValue):
        expr = '\'' + categoryColumn + '\' == "' + selectedValue + '"';
        selectNode.setPropertyValue('condition', expr)
        results = []
        runLater(histogramNode, results)
		
    return configAndRun

def genHistogram(stream, csvFile, categoryColumn, continuousColumn):
    stream.clear()	# reset the stream
    nodes = buildStream(stream, csvFile, categoryColumn, continuousColumn)
    # Run the first branch to get the categories
    categories = getCategories(nodes[0])
    # Build our callback function
    handler = buildOKHandler(nodes[1], categoryColumn, nodes[2])
    # Create the SelectorWindow and invoke its choose() function
    selector = SelectorWindow()
    selector.choose(categories, handler)
	
genHistogram(modeler.script.stream(), "$CLEO_DEMOS/DRUG1n", "Drug", "Age")

